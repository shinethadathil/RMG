mkdir RMG
cd RMG
--1) Create new webapi
dotnet new webapi -o RmgErpApp.API -n RmgErpApp.API   

--2) Open Visual Studio Code
code .

--3) Add Extensions
	Code Expensions for WebAPI:
	1) C# for Visual Studio Code (powered by omni sharp)
	2) C# Extensions - C# IDE extensions for visual studio code
	3) Nuget package manager

	Angular Extensions:
	1) Angular v7 snippets by John Papa
	2) Angular Files by Alexander Ivanichev
	3) Angular language service
	4) Angular2-switcher
	5) Auto Rename Tag
	6) Bracket Pair Colorizer
	7) Debugger for Chrome
	8) Material Icon Theme
	9) Path Intellisense
	10) Prettier - Code formatter for Visual Studio Code
	11) TSLint - vscode-tslint

--4 Startup.cs -> Configure method
	comment 
		//app.UseHsts();
		//app.UseHttpsRedirection();
--5 Properties -> launchsettings.json
	Remove https://localhost:5001; under "applicationUrl and jsut keep only http://localhost:5000
	
--6 Necessary short cut keys
	Show all commands : Ctrl + Shift + P
	Go to File : Ctrl + P
	Find in Files : Ctrl + Shift + F
	Start Debugging : F5
	Toggle Terminal : Ctrl + ~
	
	Code Options : Ctrl + .
		
--7 Run the project
	dotnet run
	dotnet watch run 
	Now listening on: http://localhost:5000
	
--8 Creating the Model and DataContext
	a. Create Models -> Value.css (table col value properties)
	b. Create folder "Data" -> public class DataContext : DbContext
		public DataContext(DbContextOptions<DataContext> options) : base (options) {}
		public DbSet<Value> Values { get; set; } --> New table to be created
		
	c. Startup.css --> ConfigureServices ->  add DbContext as a service
		services.AddDbContext<DataContext>(x => x.UseSqlServer("ConnectionString"));
		i. UseSqlServer --> Need to install a nugetpackage for SqlServer
			Ctrl + Shift + P --> Nuget package manager: Add package
				Microsoft.EntityFrameworkCore.SqlServer
					select version and enter
		RmgErpApp.API.csproj -> this adds  <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="2.2.2"/>
					
--9 Creating the Database using Entity Framework migrations	
	a. Setup the DB Connection string in appsettings.json
		"ConnectionStrings":{
			"DefaultConnection": "Data Source=.;Initial Catalog=RMG_DEV;Integrated Security=SSPI;MultipleActiveResultSets=true;"
		 }, 
	b. Startup.cs --> replace "ConnectionString" UseSqlServer("ConnectionString") with the appsettings.json key value settings
		services.AddDbContext<DataContext>(x => x.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
	c. Add the DB using entity frame work
		$ dotnet ef -h  
		Commands:
		  database    Commands to manage the database.
		  dbcontext   Commands to manage DbContext types.
		  migrations  Commands to manage migrations.
		
		$ dotnet ef migrations add InitialDBCreation
		$ dotnet ef database update  --> this will create/update the data base with that of the DB context for which we ran a migration
--10 Retrieving data from the Database	
		a. Go to the controller method
		b. initialize the DBContext in the constructor
			private readonly DataContext _context;
			public ValuesController(DataContext context)
			{
				_context = context;
			}
		c. IActionResult --> which will return the http responses
			[HttpGet]
			public IActionResult GetValues()
			{
				var values = _context.Values.ToList();
				return Ok(values);
			}
--11 Making our code asynchronous
		use async keyword on the function definition and retrun a  Task of IActionResult
		use "await" keyword and ToListAsync() inside the db fetch operation
			public async Task<IActionResult> GetValues()
			{
				var values = await _context.Values.ToListAsync();
				return Ok(values);
			}
--12 Creating the Angular application using AngularCLI
	npm install -g @angular/cli
	ng new my-dream-app
	cd my-dream-app
	ng serve
	http://localhost:4200/
--13 The Angular bootstrapping and running the Angular app
	e2e folder --> For testing
	node_modules --> angular packages 
	angular.json
	package.json
	src -> app --> components 
		startupfiles -> app.component.**
		app.module --> 		
			import { AppComponent } from './app.component';
			@NgModule({
			  declarations: [
				AppComponent
			  ],
			bootstrap: [AppComponent] --> 
				app.component.ts 
					import { Component } from '@angular/core';
					@Component({
							  selector: 'app-root', --> identifier or html tag used in index.html -> <body><app-root></app-root></body>
							  templateUrl: './app.component.html', --> html template for this component
							  styleUrls: ['./app.component.css']  --> styles for this component
							})
							export class AppComponent {  --> making this component availabe to outside
							  title = 'RmgErpApp-SPA';
							}
					main.ts --> platformBrowserDynamic().bootstrapModule(AppModule)
					Webpack --> angular.json --> 
						"index": "src/index.html",
						"main": "src/main.ts",
--14 Making HTTP requests in Angular
	create a component
	app.module --> import the component
				-> add under @NgModule -> declarations:
		import { HttpClientModule } from '@angular/common/http';
		then add HttpClientModule under @NgModule ->imports: 
	initialize the HttpClient in the new component in the constructor
				constructor(private http: HttpClient) {}
	write a method to use the webapi
		getValues() {
		this.http.get('http://localhost:5000/api/values').subscribe(response => {
		  this.values = response;
		}, error => {
		  console.log(error);
		});
	call the method getValues() frim ngOninit
			ngOnInit() {this.getValues();  }
			
	alt+o --> go to the component's html page
	alt+u --> go to the component.ts file
	
	CORS policy	--> Cross Origin Resource Sharing
	Error: Access to XMLHttpRequest at 'http://localhost:5000/api/values' from origin 'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
--15 Adding CORS support to the API
	startup.cs --> ConfigureServices -> add services.AddCors();
				->	app.UseCors(x => x.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
					app.UseMvc();
				now refresh the page and check browser's network->Header : Access-Control-Allow-Origin: *
--16 Displaying data from the API on the HTML page
	component.html -> use "a-" to get the directives
--17 Adding Bootstrap and Font-Awesome to our Angular app
	https://getbootstrap.com/
	https://fontawesome.com/  --> icons
	$ CD <SPAproj>
	$ npm install bootstrap font-awesome
	styles.css --> import bootstrap and font-awesome
		@import '../node_modules/bootstrap/dist/css/bootstrap.min.css';
		@import '../node_modules/font-awesome/css/font-awesome.min.css';
--18 Adding GIT for source control
	install git from https://git-scm.com/
	$ git status
	remove the default git reository from the project (hidden folder .git)
		C:\RMG\RmgErpApp-SPA\.git
	but keep the .gitignore file --> 
	$CD <basedirectory>
	$ git init  --> Initialized empty Git repository in C:/RMG/.git/
	$ CD <webapiProj> --> create a .gitignore file and add the files/folders to ignore
		.gitignore --> 
					.vscode
					bin
					obj
					*.db
	Now go to the SourceControl
		give a message -> InitialCommit
			CHNAGES -> + button --> stage our changes
			Commit the changes to the git repository -> ctrl + Enter OR click the tick mark
				--> these are stored to our local repository
	https://github.com/ --> create an account
	Login and create a new repository
	our repository is now : git remote add origin https://github.com/shinethadathil/RMG.git
	SourceControl -> push to -> remote git repository
	Now our proj will be availabe on remote git location

********************************************************************************************
********************************************************************************************
--Security
********************************************************************************************
********************************************************************************************
1. Storing passwords in the Database
	Hashing passwords --> SHA512 --> same decrypt for the same pwd
	Salting passwords --> Hash + Salt --> different decrypt for the same pwd
2. Creating the User model
	Model -> User.cs 
		public byte[] PasswordHash { get; set; }
		public byte[] PasswordSalt { get; set; }
	Data -> DataContext
		public DbSet<User> Users { get; set; }
	Add the User entity to the db
		$ dotnet ef migrations add AddedUserEntity
		$ dotnet ef database update --> update the changes to the database
3. The Repository pattern:
	Mediates between the data source layer and the business layers of the application
	It queries the data source for the data
	Maps the data from the data source to a business entity
	And persists changes in the business entity to the data source
	A repository separates the business logic from the interactions with the underlying data source or web service
	
	Kestrel -> Controller -> DbContext -> EF -> DbContext
	Kestrel -> Controller -> RepositoryInterface -> RepositoryImplementation -> DbContext -> EF -> DbContext
	
	Why Repository pattern?
		Minimizes duplicate query logic
		Decouples application from persistence framework (entity framework)
		All DB queries in the same place
4. Creating an Interface for the Repository	
	Data -> create an interface
	Data -> create a class to implement that interface
				get the DbContext in the construnctor of the class
					private readonly DataContext _context;
					public AuthRepository(DataContext context)
					{
						_context = context;
					}
5. Registering services in the Startup class
	Startup.css -> ConfigureServices -> 
		services.AddScoped<IAuthRepository, AuthRepository>();
6. Creating the Register method in our Auth Controller
	: ControllerBase --> base class for an MVC controller without view support.
		    public class AuthController : ControllerBase
			{
				private readonly IAuthRepository _repo;
				public AuthController(IAuthRepository repo)
				{
					_repo = repo;  --> initializes the Irepository
				}
			}
7. Using DTOs (Data Transfer Objects)
8. Debugger :
	click on debugger icon
		Add Configuration -> Dotnet Core -> Dotnet core attach
		open launch.json -> button below "add Configuration.." -> {}.Net attach to local .Net core console app
			--> click on Run icon next to .Net Core Attach --> Select the applications dll (make sure the applications is running)
			--> Put break point and run in postman the post/get
9. Validations
	DTO -> put DataAnnotations
		[Required]
		
		[Required]
        [StringLength(8, MinimumLength = 4, ErrorMessage="The password should be 4-8 characters")]
	--> We dont need to inform the controller about this validation. 
	 the [ApiController] attribut inside the .
	 controller file will coordinate this
10. Token Authentication -> https://jwt.io/
	JWTs -> JSON Web Tokens
		-store credentials, claims and other info
	JWT Structure
		-> Header
			{
				"alg" : "HS512", --> algorithm to encrypt the token
				"typ" : "JWT"	--> type
			}
		-> Payload
			{
				"nameid" : "8",
				"uniue_name" : "jose",
				"nbf" : 15111196807, --> not before-> from when the token can be used
				"exp" : 15111196807, --> expiry
				"iat" : 15111196807  --> issued at
			}
		-> Signature 
			A secret key will be stored on the server and never revealed to the client 
					ex: "AppSettings":{"Token": "JWT super secret key" }
			client will send the token to the server and server will use the secret key to validate the token.
			
		HMACSHA256(  --> algorith to hash the heade and the payload
			base64UrlEncode(header) + "." +
			base64UrlEncode(payload),
			secret
			) secret base64 encoded
		client -> userid/password -> server validates and sends back JWT to client.
		Client can store this token locally and for the later requests, the client sends JWT for further requests.
		Then server validates JWT and sends back the response. 
		So no need to validate the user with the database for every request. Instead JWT token validation will be enough.	

11. Using the Authentication middleware
		[Authorize] -> attribute in the class level on the controller
		[AllowAnonymous] -> method level overrride attribute
		Add authentication middleware in the startup.css
			 -> add JWT authentication as a service in startup.css
				services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options => {
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(Configuration.GetSection("AppSettings:Token").Value)),
                        ValidateIssuer = false,
                        ValidateAudience = false
                    };
                });
			 -> Now tell the application about the authentication.
			    So under Configure method add the authentication
					app.UseAuthentication();
					app.UseMvc();
			
***********************************************************
SPA
***********************************************************
12. AngularForms
		component.html -> <form #loginForm="ngForm" ..
		appmodule -> import {FormsModule} from '@angular/forms';
				  -> imports: [ ..... FormsModule]
13. Angular Services
	Create _service folder under app folder
	right click and "Generate Service" 
	In serices we need @Injectable ddecorator --> allows inject things to our service
	But in components are injectable by defalut so no need to specify @Injectable ddecorator
		import { Injectable } from '@angular/core';
		@Injectable({  --> allows inject things to our service
		  providedIn: 'root'
		})
		export class AuthService {
		constructor() { }
		}
	Register this service in the app.module
		import { AuthService } from './_services/auth.service';
		providers: [AuthService],
	service.ts -> constructor(private http: HttpClient) --> http client module to our service
	
14. Make use of service
	component -> Inject the service to the constructor 

15. Parent to Child Component communication using Input properties
	In parent html -> <app-child [valuesFromParent]="values"></app-child>
	In child ts file -> 
		export class ChildComponent implements OnInit {
			@Input() valuesFromParent: any;  --> also import Input from angular core -> import { Component, OnInit, Input } from '@angular/core';
	In child html -> 
			<option  *ngFor="let value of valuesFromParent" [value]="value">{{value.name}}</option> 
	
	** Now the values from parent is available in child component

16. Component Communication Child to Parent using Output properties 
	In child component
		-> add an @Output property
		-> output property emits events
			@Output() cancelRegister = new EventEmitter();
			import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
			cancel() { this.cancelRegister.emit(false);}
	In the parent component.html
		-> (cancelRegister)="cancelRegisterMode($event)
		-> <app-child [valuesFromParent]="values" (cancelRegister)="cancelRegisterMode($event)"></app-child>
	In the parent ts	
		-> cancelRegisterMode(registerMode: boolean) {
					this.registerMode = registerMode;
					}
					
		

	


	
			
		
					
	
	
	


		
				
		
		
	